/**
 * generated by Xtext 2.31.0
 */
package es.unican.ildm.practica4.xtext.generator;

import com.google.common.collect.Iterables;
import factory.Factory;
import factory.Machine;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FactoryGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Factory> _filter = Iterables.<Factory>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Factory.class);
    for (final Factory factory : _filter) {
      fsa.generateFile("machines.csv", this.compileMachine(factory));
    }
  }

  public CharSequence compileMachine(final Factory factory) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("name, processingTime");
    _builder.newLine();
    {
      List<Machine> _machines = this.machines(factory);
      for(final Machine machine : _machines) {
        String _name = machine.getName();
        _builder.append(_name);
        _builder.append(",");
        int _processingTime = machine.getProcessingTime();
        _builder.append(_processingTime);
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public List<Machine> machines(final Factory factory) {
    return IterableExtensions.<Machine>toList(Iterables.<Machine>filter(factory.getElements(), Machine.class));
  }
}
