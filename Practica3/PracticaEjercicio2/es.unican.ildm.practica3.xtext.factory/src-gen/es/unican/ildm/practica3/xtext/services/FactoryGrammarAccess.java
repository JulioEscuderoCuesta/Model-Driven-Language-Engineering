/*
 * generated by Xtext 2.31.0
 */
package es.unican.ildm.practica3.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FactoryGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FactoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Factory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFactoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFactoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElementsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cElementsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cElementsElementParserRuleCall_3_2_0 = (RuleCall)cElementsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cElementsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_3_3_1_0 = (RuleCall)cElementsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cConnectionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cConnectionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cConnectionsConnectionParserRuleCall_4_2_0 = (RuleCall)cConnectionsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cConnectionsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cConnectionsConnectionParserRuleCall_4_3_1_0 = (RuleCall)cConnectionsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Factory returns Factory:
		//    {Factory}
		//    'Factory'
		//    '{'
		//        ('elements' '{' elements+=Element ( "," elements+=Element)* '}' )?
		//        ('connections' '{' connections+=Connection ( "," connections+=Connection)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Factory}
		//'Factory'
		//'{'
		//    ('elements' '{' elements+=Element ( "," elements+=Element)* '}' )?
		//    ('connections' '{' connections+=Connection ( "," connections+=Connection)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Factory}
		public Action getFactoryAction_0() { return cFactoryAction_0; }
		
		//'Factory'
		public Keyword getFactoryKeyword_1() { return cFactoryKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('elements' '{' elements+=Element ( "," elements+=Element)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'elements'
		public Keyword getElementsKeyword_3_0() { return cElementsKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//elements+=Element
		public Assignment getElementsAssignment_3_2() { return cElementsAssignment_3_2; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_3_2_0() { return cElementsElementParserRuleCall_3_2_0; }
		
		//( "," elements+=Element)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//elements+=Element
		public Assignment getElementsAssignment_3_3_1() { return cElementsAssignment_3_3_1; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_3_3_1_0() { return cElementsElementParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('connections' '{' connections+=Connection ( "," connections+=Connection)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'connections'
		public Keyword getConnectionsKeyword_4_0() { return cConnectionsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//connections+=Connection
		public Assignment getConnectionsAssignment_4_2() { return cConnectionsAssignment_4_2; }
		
		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_4_2_0() { return cConnectionsConnectionParserRuleCall_4_2_0; }
		
		//( "," connections+=Connection)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//connections+=Connection
		public Assignment getConnectionsAssignment_4_3_1() { return cConnectionsAssignment_4_3_1; }
		
		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_4_3_1_0() { return cConnectionsConnectionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssemblerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWrapperParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStickProducerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCandyProducerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConveyorBeltParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cFlattenerParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Element returns Element:
		//    Assembler | Wrapper | StickProducer | CandyProducer | ConveyorBelt | Flattener;
		@Override public ParserRule getRule() { return rule; }
		
		//Assembler | Wrapper | StickProducer | CandyProducer | ConveyorBelt | Flattener
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assembler
		public RuleCall getAssemblerParserRuleCall_0() { return cAssemblerParserRuleCall_0; }
		
		//Wrapper
		public RuleCall getWrapperParserRuleCall_1() { return cWrapperParserRuleCall_1; }
		
		//StickProducer
		public RuleCall getStickProducerParserRuleCall_2() { return cStickProducerParserRuleCall_2; }
		
		//CandyProducer
		public RuleCall getCandyProducerParserRuleCall_3() { return cCandyProducerParserRuleCall_3; }
		
		//ConveyorBelt
		public RuleCall getConveyorBeltParserRuleCall_4() { return cConveyorBeltParserRuleCall_4; }
		
		//Flattener
		public RuleCall getFlattenerParserRuleCall_5() { return cFlattenerParserRuleCall_5; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCandyFlatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStickParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCandyBallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLollipopParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Component returns Component:
		//    CandyFlat | Stick | CandyBall | Lollipop;
		@Override public ParserRule getRule() { return rule; }
		
		//CandyFlat | Stick | CandyBall | Lollipop
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CandyFlat
		public RuleCall getCandyFlatParserRuleCall_0() { return cCandyFlatParserRuleCall_0; }
		
		//Stick
		public RuleCall getStickParserRuleCall_1() { return cStickParserRuleCall_1; }
		
		//CandyBall
		public RuleCall getCandyBallParserRuleCall_2() { return cCandyBallParserRuleCall_2; }
		
		//Lollipop
		public RuleCall getLollipopParserRuleCall_3() { return cLollipopParserRuleCall_3; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConnectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceElementCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceElementIDTerminalRuleCall_1_0_1 = (RuleCall)cSourceElementCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetElementCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetElementIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetElementCrossReference_3_0.eContents().get(1);
		
		//Connection returns Connection:
		//    {Connection}
		//        source=[Element] '->' target=[Element]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Connection}
		//    source=[Element] '->' target=[Element]
		public Group getGroup() { return cGroup; }
		
		//{Connection}
		public Action getConnectionAction_0() { return cConnectionAction_0; }
		
		//source=[Element]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }
		
		//[Element]
		public CrossReference getSourceElementCrossReference_1_0() { return cSourceElementCrossReference_1_0; }
		
		//ID
		public RuleCall getSourceElementIDTerminalRuleCall_1_0_1() { return cSourceElementIDTerminalRuleCall_1_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//target=[Element]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[Element]
		public CrossReference getTargetElementCrossReference_3_0() { return cTargetElementCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetElementIDTerminalRuleCall_3_0_1() { return cTargetElementIDTerminalRuleCall_3_0_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AssemblerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Assembler");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssemblerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProcessingTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcessingTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcessingTimeEIntParserRuleCall_4_0 = (RuleCall)cProcessingTimeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Assembler returns Assembler:
		//    'Assembler'
		//    name=EString
		//    '{'
		//        'processingTime' processingTime=EInt
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Assembler'
		//name=EString
		//'{'
		//    'processingTime' processingTime=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Assembler'
		public Keyword getAssemblerKeyword_0() { return cAssemblerKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'processingTime'
		public Keyword getProcessingTimeKeyword_3() { return cProcessingTimeKeyword_3; }
		
		//processingTime=EInt
		public Assignment getProcessingTimeAssignment_4() { return cProcessingTimeAssignment_4; }
		
		//EInt
		public RuleCall getProcessingTimeEIntParserRuleCall_4_0() { return cProcessingTimeEIntParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class WrapperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Wrapper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWrapperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProcessingTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcessingTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcessingTimeEIntParserRuleCall_4_0 = (RuleCall)cProcessingTimeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Wrapper returns Wrapper:
		//    'Wrapper'
		//    name=EString
		//    '{'
		//        'processingTime' processingTime=EInt
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Wrapper'
		//name=EString
		//'{'
		//    'processingTime' processingTime=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Wrapper'
		public Keyword getWrapperKeyword_0() { return cWrapperKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'processingTime'
		public Keyword getProcessingTimeKeyword_3() { return cProcessingTimeKeyword_3; }
		
		//processingTime=EInt
		public Assignment getProcessingTimeAssignment_4() { return cProcessingTimeAssignment_4; }
		
		//EInt
		public RuleCall getProcessingTimeEIntParserRuleCall_4_0() { return cProcessingTimeEIntParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class StickProducerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.StickProducer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStickProducerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProcessingTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcessingTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcessingTimeEIntParserRuleCall_4_0 = (RuleCall)cProcessingTimeAssignment_4.eContents().get(0);
		private final Keyword cCounterKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCounterAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCounterEIntParserRuleCall_6_0 = (RuleCall)cCounterAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//StickProducer returns StickProducer:
		//    'StickProducer'
		//    name=EString
		//    '{'
		//        'processingTime' processingTime=EInt
		//        'counter' counter=EInt
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'StickProducer'
		//name=EString
		//'{'
		//    'processingTime' processingTime=EInt
		//    'counter' counter=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'StickProducer'
		public Keyword getStickProducerKeyword_0() { return cStickProducerKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'processingTime'
		public Keyword getProcessingTimeKeyword_3() { return cProcessingTimeKeyword_3; }
		
		//processingTime=EInt
		public Assignment getProcessingTimeAssignment_4() { return cProcessingTimeAssignment_4; }
		
		//EInt
		public RuleCall getProcessingTimeEIntParserRuleCall_4_0() { return cProcessingTimeEIntParserRuleCall_4_0; }
		
		//'counter'
		public Keyword getCounterKeyword_5() { return cCounterKeyword_5; }
		
		//counter=EInt
		public Assignment getCounterAssignment_6() { return cCounterAssignment_6; }
		
		//EInt
		public RuleCall getCounterEIntParserRuleCall_6_0() { return cCounterEIntParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class CandyProducerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.CandyProducer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCandyProducerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProcessingTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcessingTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcessingTimeEIntParserRuleCall_4_0 = (RuleCall)cProcessingTimeAssignment_4.eContents().get(0);
		private final Keyword cCounterKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCounterAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCounterEIntParserRuleCall_6_0 = (RuleCall)cCounterAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CandyProducer returns CandyProducer:
		//    'CandyProducer'
		//    name=EString
		//    '{'
		//        'processingTime' processingTime=EInt
		//        'counter' counter=EInt
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'CandyProducer'
		//name=EString
		//'{'
		//    'processingTime' processingTime=EInt
		//    'counter' counter=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'CandyProducer'
		public Keyword getCandyProducerKeyword_0() { return cCandyProducerKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'processingTime'
		public Keyword getProcessingTimeKeyword_3() { return cProcessingTimeKeyword_3; }
		
		//processingTime=EInt
		public Assignment getProcessingTimeAssignment_4() { return cProcessingTimeAssignment_4; }
		
		//EInt
		public RuleCall getProcessingTimeEIntParserRuleCall_4_0() { return cProcessingTimeEIntParserRuleCall_4_0; }
		
		//'counter'
		public Keyword getCounterKeyword_5() { return cCounterKeyword_5; }
		
		//counter=EInt
		public Assignment getCounterAssignment_6() { return cCounterAssignment_6; }
		
		//EInt
		public RuleCall getCounterEIntParserRuleCall_6_0() { return cCounterEIntParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ConveyorBeltElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.ConveyorBelt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConveyorBeltKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cCapacityKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCapacityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCapacityEIntParserRuleCall_4_0 = (RuleCall)cCapacityAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cComponentsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cComponentsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cComponentsComponentParserRuleCall_5_2_0 = (RuleCall)cComponentsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cComponentsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cComponentsComponentParserRuleCall_5_3_1_0 = (RuleCall)cComponentsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConveyorBelt returns ConveyorBelt:
		//    'ConveyorBelt'
		//    name=EString
		//    '{'
		//        'capacity' capacity=EInt
		//        ('components' '{' components+=Component ( "," components+=Component)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ConveyorBelt'
		//name=EString
		//'{'
		//    'capacity' capacity=EInt
		//    ('components' '{' components+=Component ( "," components+=Component)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'ConveyorBelt'
		public Keyword getConveyorBeltKeyword_0() { return cConveyorBeltKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'capacity'
		public Keyword getCapacityKeyword_3() { return cCapacityKeyword_3; }
		
		//capacity=EInt
		public Assignment getCapacityAssignment_4() { return cCapacityAssignment_4; }
		
		//EInt
		public RuleCall getCapacityEIntParserRuleCall_4_0() { return cCapacityEIntParserRuleCall_4_0; }
		
		//('components' '{' components+=Component ( "," components+=Component)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'components'
		public Keyword getComponentsKeyword_5_0() { return cComponentsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//components+=Component
		public Assignment getComponentsAssignment_5_2() { return cComponentsAssignment_5_2; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_5_2_0() { return cComponentsComponentParserRuleCall_5_2_0; }
		
		//( "," components+=Component)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//components+=Component
		public Assignment getComponentsAssignment_5_3_1() { return cComponentsAssignment_5_3_1; }
		
		//Component
		public RuleCall getComponentsComponentParserRuleCall_5_3_1_0() { return cComponentsComponentParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FlattenerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Flattener");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlattenerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cProcessingTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcessingTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcessingTimeEIntParserRuleCall_4_0 = (RuleCall)cProcessingTimeAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Flattener returns Flattener:
		//    'Flattener'
		//    name=EString
		//    '{'
		//        'processingTime' processingTime=EInt
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Flattener'
		//name=EString
		//'{'
		//    'processingTime' processingTime=EInt
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Flattener'
		public Keyword getFlattenerKeyword_0() { return cFlattenerKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'processingTime'
		public Keyword getProcessingTimeKeyword_3() { return cProcessingTimeKeyword_3; }
		
		//processingTime=EInt
		public Assignment getProcessingTimeAssignment_4() { return cProcessingTimeAssignment_4; }
		
		//EInt
		public RuleCall getProcessingTimeEIntParserRuleCall_4_0() { return cProcessingTimeEIntParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class CandyFlatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.CandyFlat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCandyFlatAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCandyFlatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CandyFlat returns CandyFlat:
		//    {CandyFlat}
		//    'CandyFlat'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CandyFlat}
		//'CandyFlat'
		public Group getGroup() { return cGroup; }
		
		//{CandyFlat}
		public Action getCandyFlatAction_0() { return cCandyFlatAction_0; }
		
		//'CandyFlat'
		public Keyword getCandyFlatKeyword_1() { return cCandyFlatKeyword_1; }
	}
	public class StickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Stick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStickAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStickKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Stick returns Stick:
		//    {Stick}
		//    'Stick'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Stick}
		//'Stick'
		public Group getGroup() { return cGroup; }
		
		//{Stick}
		public Action getStickAction_0() { return cStickAction_0; }
		
		//'Stick'
		public Keyword getStickKeyword_1() { return cStickKeyword_1; }
	}
	public class CandyBallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.CandyBall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCandyBallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCandyBallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//CandyBall returns CandyBall:
		//    {CandyBall}
		//    'CandyBall'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{CandyBall}
		//'CandyBall'
		public Group getGroup() { return cGroup; }
		
		//{CandyBall}
		public Action getCandyBallAction_0() { return cCandyBallAction_0; }
		
		//'CandyBall'
		public Keyword getCandyBallKeyword_1() { return cCandyBallKeyword_1; }
	}
	public class LollipopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.xtext.Factory.Lollipop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLollipopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLollipopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Lollipop returns Lollipop:
		//    {Lollipop}
		//    'Lollipop'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Lollipop}
		//'Lollipop'
		public Group getGroup() { return cGroup; }
		
		//{Lollipop}
		public Action getLollipopAction_0() { return cLollipopAction_0; }
		
		//'Lollipop'
		public Keyword getLollipopKeyword_1() { return cLollipopKeyword_1; }
	}
	
	
	private final FactoryElements pFactory;
	private final ElementElements pElement;
	private final ComponentElements pComponent;
	private final ConnectionElements pConnection;
	private final EStringElements pEString;
	private final AssemblerElements pAssembler;
	private final WrapperElements pWrapper;
	private final StickProducerElements pStickProducer;
	private final CandyProducerElements pCandyProducer;
	private final ConveyorBeltElements pConveyorBelt;
	private final FlattenerElements pFlattener;
	private final EIntElements pEInt;
	private final CandyFlatElements pCandyFlat;
	private final StickElements pStick;
	private final CandyBallElements pCandyBall;
	private final LollipopElements pLollipop;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FactoryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFactory = new FactoryElements();
		this.pElement = new ElementElements();
		this.pComponent = new ComponentElements();
		this.pConnection = new ConnectionElements();
		this.pEString = new EStringElements();
		this.pAssembler = new AssemblerElements();
		this.pWrapper = new WrapperElements();
		this.pStickProducer = new StickProducerElements();
		this.pCandyProducer = new CandyProducerElements();
		this.pConveyorBelt = new ConveyorBeltElements();
		this.pFlattener = new FlattenerElements();
		this.pEInt = new EIntElements();
		this.pCandyFlat = new CandyFlatElements();
		this.pStick = new StickElements();
		this.pCandyBall = new CandyBallElements();
		this.pLollipop = new LollipopElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.unican.ildm.practica3.xtext.Factory".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Factory returns Factory:
	//    {Factory}
	//    'Factory'
	//    '{'
	//        ('elements' '{' elements+=Element ( "," elements+=Element)* '}' )?
	//        ('connections' '{' connections+=Connection ( "," connections+=Connection)* '}' )?
	//    '}';
	public FactoryElements getFactoryAccess() {
		return pFactory;
	}
	
	public ParserRule getFactoryRule() {
		return getFactoryAccess().getRule();
	}
	
	//Element returns Element:
	//    Assembler | Wrapper | StickProducer | CandyProducer | ConveyorBelt | Flattener;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Component returns Component:
	//    CandyFlat | Stick | CandyBall | Lollipop;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//Connection returns Connection:
	//    {Connection}
	//        source=[Element] '->' target=[Element]
	//    ;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Assembler returns Assembler:
	//    'Assembler'
	//    name=EString
	//    '{'
	//        'processingTime' processingTime=EInt
	//    '}';
	public AssemblerElements getAssemblerAccess() {
		return pAssembler;
	}
	
	public ParserRule getAssemblerRule() {
		return getAssemblerAccess().getRule();
	}
	
	//Wrapper returns Wrapper:
	//    'Wrapper'
	//    name=EString
	//    '{'
	//        'processingTime' processingTime=EInt
	//    '}';
	public WrapperElements getWrapperAccess() {
		return pWrapper;
	}
	
	public ParserRule getWrapperRule() {
		return getWrapperAccess().getRule();
	}
	
	//StickProducer returns StickProducer:
	//    'StickProducer'
	//    name=EString
	//    '{'
	//        'processingTime' processingTime=EInt
	//        'counter' counter=EInt
	//    '}';
	public StickProducerElements getStickProducerAccess() {
		return pStickProducer;
	}
	
	public ParserRule getStickProducerRule() {
		return getStickProducerAccess().getRule();
	}
	
	//CandyProducer returns CandyProducer:
	//    'CandyProducer'
	//    name=EString
	//    '{'
	//        'processingTime' processingTime=EInt
	//        'counter' counter=EInt
	//    '}';
	public CandyProducerElements getCandyProducerAccess() {
		return pCandyProducer;
	}
	
	public ParserRule getCandyProducerRule() {
		return getCandyProducerAccess().getRule();
	}
	
	//ConveyorBelt returns ConveyorBelt:
	//    'ConveyorBelt'
	//    name=EString
	//    '{'
	//        'capacity' capacity=EInt
	//        ('components' '{' components+=Component ( "," components+=Component)* '}' )?
	//    '}';
	public ConveyorBeltElements getConveyorBeltAccess() {
		return pConveyorBelt;
	}
	
	public ParserRule getConveyorBeltRule() {
		return getConveyorBeltAccess().getRule();
	}
	
	//Flattener returns Flattener:
	//    'Flattener'
	//    name=EString
	//    '{'
	//        'processingTime' processingTime=EInt
	//    '}';
	public FlattenerElements getFlattenerAccess() {
		return pFlattener;
	}
	
	public ParserRule getFlattenerRule() {
		return getFlattenerAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//CandyFlat returns CandyFlat:
	//    {CandyFlat}
	//    'CandyFlat'
	//    ;
	public CandyFlatElements getCandyFlatAccess() {
		return pCandyFlat;
	}
	
	public ParserRule getCandyFlatRule() {
		return getCandyFlatAccess().getRule();
	}
	
	//Stick returns Stick:
	//    {Stick}
	//    'Stick'
	//    ;
	public StickElements getStickAccess() {
		return pStick;
	}
	
	public ParserRule getStickRule() {
		return getStickAccess().getRule();
	}
	
	//CandyBall returns CandyBall:
	//    {CandyBall}
	//    'CandyBall'
	//    ;
	public CandyBallElements getCandyBallAccess() {
		return pCandyBall;
	}
	
	public ParserRule getCandyBallRule() {
		return getCandyBallAccess().getRule();
	}
	
	//Lollipop returns Lollipop:
	//    {Lollipop}
	//    'Lollipop'
	//    ;
	public LollipopElements getLollipopAccess() {
		return pLollipop;
	}
	
	public ParserRule getLollipopRule() {
		return getLollipopAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
