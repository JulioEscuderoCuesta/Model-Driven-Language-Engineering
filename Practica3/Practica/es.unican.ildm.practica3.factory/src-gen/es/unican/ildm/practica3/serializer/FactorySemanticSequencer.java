/*
 * generated by Xtext 2.31.0
 */
package es.unican.ildm.practica3.serializer;

import com.google.inject.Inject;
import es.unican.ildm.practica3.factory.Factory;
import es.unican.ildm.practica3.factory.FactoryPackage;
import es.unican.ildm.practica3.factory.Machine;
import es.unican.ildm.practica3.factory.Operator;
import es.unican.ildm.practica3.factory.Shift;
import es.unican.ildm.practica3.factory.Task;
import es.unican.ildm.practica3.services.FactoryGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class FactorySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FactoryGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FactoryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FactoryPackage.FACTORY:
				sequence_Factory(context, (Factory) semanticObject); 
				return; 
			case FactoryPackage.MACHINE:
				sequence_Machine(context, (Machine) semanticObject); 
				return; 
			case FactoryPackage.OPERATOR:
				sequence_Operator(context, (Operator) semanticObject); 
				return; 
			case FactoryPackage.SHIFT:
				sequence_Shift(context, (Shift) semanticObject); 
				return; 
			case FactoryPackage.TASK:
				sequence_Task(context, (Task) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Factory returns Factory
	 *
	 * Constraint:
	 *     elements+=Element+
	 * </pre>
	 */
	protected void sequence_Factory(ISerializationContext context, Factory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Machine
	 *     Machine returns Machine
	 *
	 * Constraint:
	 *     (name=EString manufacturer=STRING?)
	 * </pre>
	 */
	protected void sequence_Machine(ISerializationContext context, Machine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Operator
	 *     Operator returns Operator
	 *
	 * Constraint:
	 *     (name=EString area=STRING?)
	 * </pre>
	 */
	protected void sequence_Operator(ISerializationContext context, Operator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Shift
	 *     Shift returns Shift
	 *
	 * Constraint:
	 *     (name=EString date=STRING work+=[Task|ID] work+=[Task|ID]*)
	 * </pre>
	 */
	protected void sequence_Shift(ISerializationContext context, Shift semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Task
	 *     Task returns Task
	 *
	 * Constraint:
	 *     (name=EString duration=EIntegerObject? operator=[Operator|ID] machine=[Machine|ID])
	 * </pre>
	 */
	protected void sequence_Task(ISerializationContext context, Task semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
