/*
 * generated by Xtext 2.31.0
 */
grammar InternalFactory;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package es.unican.ildm.practica3.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package es.unican.ildm.practica3.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import es.unican.ildm.practica3.services.FactoryGrammarAccess;

}

@parser::members {

 	private FactoryGrammarAccess grammarAccess;

    public InternalFactoryParser(TokenStream input, FactoryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Factory";
   	}

   	@Override
   	protected FactoryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFactory
entryRuleFactory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactoryRule()); }
	iv_ruleFactory=ruleFactory
	{ $current=$iv_ruleFactory.current; }
	EOF;

// Rule Factory
ruleFactory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFactoryAccess().getElementsElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFactoryRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"es.unican.ildm.practica3.Factory.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getShiftParserRuleCall_0());
		}
		this_Shift_0=ruleShift
		{
			$current = $this_Shift_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getTaskParserRuleCall_1());
		}
		this_Task_1=ruleTask
		{
			$current = $this_Task_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getOperatorParserRuleCall_2());
		}
		this_Operator_2=ruleOperator
		{
			$current = $this_Operator_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getMachineParserRuleCall_3());
		}
		this_Machine_3=ruleMachine
		{
			$current = $this_Machine_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleShift
entryRuleShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShiftRule()); }
	iv_ruleShift=ruleShift
	{ $current=$iv_ruleShift.current; }
	EOF;

// Rule Shift
ruleShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='shift'
		{
			newLeafNode(otherlv_0, grammarAccess.getShiftAccess().getShiftKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getShiftAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getShiftRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"es.unican.ildm.practica3.Factory.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getShiftAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='date'
		{
			newLeafNode(otherlv_3, grammarAccess.getShiftAccess().getDateKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getShiftAccess().getColonKeyword_4());
		}
		(
			(
				lv_date_5_0=RULE_STRING
				{
					newLeafNode(lv_date_5_0, grammarAccess.getShiftAccess().getDateSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShiftRule());
					}
					setWithLastConsumed(
						$current,
						"date",
						lv_date_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6=';'
		{
			newLeafNode(otherlv_6, grammarAccess.getShiftAccess().getSemicolonKeyword_6());
		}
		otherlv_7='work'
		{
			newLeafNode(otherlv_7, grammarAccess.getShiftAccess().getWorkKeyword_7());
		}
		otherlv_8=':'
		{
			newLeafNode(otherlv_8, grammarAccess.getShiftAccess().getColonKeyword_8());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShiftRule());
					}
				}
				otherlv_9=RULE_ID
				{
					newLeafNode(otherlv_9, grammarAccess.getShiftAccess().getWorkTaskCrossReference_9_0());
				}
			)
		)
		(
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getShiftAccess().getCommaKeyword_10_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getShiftRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getShiftAccess().getWorkTaskCrossReference_10_1_0());
					}
				)
			)
		)*
		otherlv_12=';'
		{
			newLeafNode(otherlv_12, grammarAccess.getShiftAccess().getSemicolonKeyword_11());
		}
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getShiftAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	iv_ruleTask=ruleTask
	{ $current=$iv_ruleTask.current; }
	EOF;

// Rule Task
ruleTask returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTaskAccess().getTaskAction_0(),
					$current);
			}
		)
		otherlv_1='task'
		{
			newLeafNode(otherlv_1, grammarAccess.getTaskAccess().getTaskKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTaskAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTaskRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"es.unican.ildm.practica3.Factory.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='duration'
			{
				newLeafNode(otherlv_3, grammarAccess.getTaskAccess().getDurationKeyword_3_0());
			}
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getTaskAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTaskAccess().getDurationEIntegerObjectParserRuleCall_3_2_0());
					}
					lv_duration_5_0=ruleEIntegerObject
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTaskRule());
						}
						set(
							$current,
							"duration",
							lv_duration_5_0,
							"es.unican.ildm.practica3.Factory.EIntegerObject");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='['
		{
			newLeafNode(otherlv_6, grammarAccess.getTaskAccess().getLeftSquareBracketKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getTaskAccess().getOperatorOperatorCrossReference_5_0());
				}
			)
		)
		otherlv_8='->'
		{
			newLeafNode(otherlv_8, grammarAccess.getTaskAccess().getHyphenMinusGreaterThanSignKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTaskRule());
					}
				}
				otherlv_9=RULE_ID
				{
					newLeafNode(otherlv_9, grammarAccess.getTaskAccess().getMachineMachineCrossReference_7_0());
				}
			)
		)
		otherlv_10=']'
		{
			newLeafNode(otherlv_10, grammarAccess.getTaskAccess().getRightSquareBracketKeyword_8());
		}
		otherlv_11=';'
		{
			newLeafNode(otherlv_11, grammarAccess.getTaskAccess().getSemicolonKeyword_9());
		}
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current; }
	EOF;

// Rule Operator
ruleOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='operator'
		{
			newLeafNode(otherlv_0, grammarAccess.getOperatorAccess().getOperatorKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOperatorAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOperatorRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"es.unican.ildm.practica3.Factory.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='area'
			{
				newLeafNode(otherlv_2, grammarAccess.getOperatorAccess().getAreaKeyword_2_0());
			}
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getOperatorAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					lv_area_4_0=RULE_STRING
					{
						newLeafNode(lv_area_4_0, grammarAccess.getOperatorAccess().getAreaSTRINGTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOperatorRule());
						}
						setWithLastConsumed(
							$current,
							"area",
							lv_area_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getOperatorAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleMachine
entryRuleMachine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMachineRule()); }
	iv_ruleMachine=ruleMachine
	{ $current=$iv_ruleMachine.current; }
	EOF;

// Rule Machine
ruleMachine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='machine'
		{
			newLeafNode(otherlv_0, grammarAccess.getMachineAccess().getMachineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMachineAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMachineRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"es.unican.ildm.practica3.Factory.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='manufacturer'
			{
				newLeafNode(otherlv_2, grammarAccess.getMachineAccess().getManufacturerKeyword_2_0());
			}
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getMachineAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					lv_manufacturer_4_0=RULE_STRING
					{
						newLeafNode(lv_manufacturer_4_0, grammarAccess.getMachineAccess().getManufacturerSTRINGTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMachineRule());
						}
						setWithLastConsumed(
							$current,
							"manufacturer",
							lv_manufacturer_4_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getMachineAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEIntegerObject
entryRuleEIntegerObject returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntegerObjectRule()); }
	iv_ruleEIntegerObject=ruleEIntegerObject
	{ $current=$iv_ruleEIntegerObject.current.getText(); }
	EOF;

// Rule EIntegerObject
ruleEIntegerObject returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntegerObjectAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntegerObjectAccess().getINTTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
