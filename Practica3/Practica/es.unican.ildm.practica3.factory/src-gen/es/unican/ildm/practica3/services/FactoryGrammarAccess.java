/*
 * generated by Xtext 2.31.0
 */
package es.unican.ildm.practica3.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FactoryGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FactoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.Factory.Factory");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Factory:
		//    elements+=Element*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Element*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_0() { return cElementsElementParserRuleCall_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.Factory.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShiftParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOperatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMachineParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//    Shift | Task | Operator | Machine
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Shift | Task | Operator | Machine
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Shift
		public RuleCall getShiftParserRuleCall_0() { return cShiftParserRuleCall_0; }
		
		//Task
		public RuleCall getTaskParserRuleCall_1() { return cTaskParserRuleCall_1; }
		
		//Operator
		public RuleCall getOperatorParserRuleCall_2() { return cOperatorParserRuleCall_2; }
		
		//Machine
		public RuleCall getMachineParserRuleCall_3() { return cMachineParserRuleCall_3; }
	}
	public class ShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.Factory.Shift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cShiftKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDateSTRINGTerminalRuleCall_5_0 = (RuleCall)cDateAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cWorkKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cColonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cWorkAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cWorkTaskCrossReference_9_0 = (CrossReference)cWorkAssignment_9.eContents().get(0);
		private final RuleCall cWorkTaskIDTerminalRuleCall_9_0_1 = (RuleCall)cWorkTaskCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cWorkAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cWorkTaskCrossReference_10_1_0 = (CrossReference)cWorkAssignment_10_1.eContents().get(0);
		private final RuleCall cWorkTaskIDTerminalRuleCall_10_1_0_1 = (RuleCall)cWorkTaskCrossReference_10_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Shift:
		//    'shift' name=EString
		//    '{'
		//        'date' ':' date=STRING  ';'
		//        'work' ':' work+=[Task] ("," work+=[Task])* ';'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'shift' name=EString
		//'{'
		//    'date' ':' date=STRING  ';'
		//    'work' ':' work+=[Task] ("," work+=[Task])* ';'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'shift'
		public Keyword getShiftKeyword_0() { return cShiftKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'date'
		public Keyword getDateKeyword_3() { return cDateKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//date=STRING
		public Assignment getDateAssignment_5() { return cDateAssignment_5; }
		
		//STRING
		public RuleCall getDateSTRINGTerminalRuleCall_5_0() { return cDateSTRINGTerminalRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//'work'
		public Keyword getWorkKeyword_7() { return cWorkKeyword_7; }
		
		//':'
		public Keyword getColonKeyword_8() { return cColonKeyword_8; }
		
		//work+=[Task]
		public Assignment getWorkAssignment_9() { return cWorkAssignment_9; }
		
		//[Task]
		public CrossReference getWorkTaskCrossReference_9_0() { return cWorkTaskCrossReference_9_0; }
		
		//ID
		public RuleCall getWorkTaskIDTerminalRuleCall_9_0_1() { return cWorkTaskIDTerminalRuleCall_9_0_1; }
		
		//("," work+=[Task])*
		public Group getGroup_10() { return cGroup_10; }
		
		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//work+=[Task]
		public Assignment getWorkAssignment_10_1() { return cWorkAssignment_10_1; }
		
		//[Task]
		public CrossReference getWorkTaskCrossReference_10_1_0() { return cWorkTaskCrossReference_10_1_0; }
		
		//ID
		public RuleCall getWorkTaskIDTerminalRuleCall_10_1_0_1() { return cWorkTaskIDTerminalRuleCall_10_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.Factory.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTaskAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTaskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDurationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cDurationAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cDurationEIntegerObjectParserRuleCall_3_2_0 = (RuleCall)cDurationAssignment_3_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOperatorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cOperatorOperatorCrossReference_5_0 = (CrossReference)cOperatorAssignment_5.eContents().get(0);
		private final RuleCall cOperatorOperatorIDTerminalRuleCall_5_0_1 = (RuleCall)cOperatorOperatorCrossReference_5_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMachineAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cMachineMachineCrossReference_7_0 = (CrossReference)cMachineAssignment_7.eContents().get(0);
		private final RuleCall cMachineMachineIDTerminalRuleCall_7_0_1 = (RuleCall)cMachineMachineCrossReference_7_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSemicolonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Task:
		//    {Task} 'task' name=EString ('duration' '=' duration=EIntegerObject)? '[' operator=[Operator] '->' machine=[Machine] ']' ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Task} 'task' name=EString ('duration' '=' duration=EIntegerObject)? '[' operator=[Operator] '->' machine=[Machine] ']' ';'
		public Group getGroup() { return cGroup; }
		
		//{Task}
		public Action getTaskAction_0() { return cTaskAction_0; }
		
		//'task'
		public Keyword getTaskKeyword_1() { return cTaskKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('duration' '=' duration=EIntegerObject)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'duration'
		public Keyword getDurationKeyword_3_0() { return cDurationKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//duration=EIntegerObject
		public Assignment getDurationAssignment_3_2() { return cDurationAssignment_3_2; }
		
		//EIntegerObject
		public RuleCall getDurationEIntegerObjectParserRuleCall_3_2_0() { return cDurationEIntegerObjectParserRuleCall_3_2_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//operator=[Operator]
		public Assignment getOperatorAssignment_5() { return cOperatorAssignment_5; }
		
		//[Operator]
		public CrossReference getOperatorOperatorCrossReference_5_0() { return cOperatorOperatorCrossReference_5_0; }
		
		//ID
		public RuleCall getOperatorOperatorIDTerminalRuleCall_5_0_1() { return cOperatorOperatorIDTerminalRuleCall_5_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }
		
		//machine=[Machine]
		public Assignment getMachineAssignment_7() { return cMachineAssignment_7; }
		
		//[Machine]
		public CrossReference getMachineMachineCrossReference_7_0() { return cMachineMachineCrossReference_7_0; }
		
		//ID
		public RuleCall getMachineMachineIDTerminalRuleCall_7_0_1() { return cMachineMachineIDTerminalRuleCall_7_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//';'
		public Keyword getSemicolonKeyword_9() { return cSemicolonKeyword_9; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.Factory.Operator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAreaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAreaAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAreaSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cAreaAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Operator:
		//    'operator' name=EString ('area' '=' area=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'operator' name=EString ('area' '=' area=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'operator'
		public Keyword getOperatorKeyword_0() { return cOperatorKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('area' '=' area=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'area'
		public Keyword getAreaKeyword_2_0() { return cAreaKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//area=STRING
		public Assignment getAreaAssignment_2_2() { return cAreaAssignment_2_2; }
		
		//STRING
		public RuleCall getAreaSTRINGTerminalRuleCall_2_2_0() { return cAreaSTRINGTerminalRuleCall_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.Factory.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cManufacturerKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cManufacturerAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cManufacturerSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cManufacturerAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Machine:
		//    'machine' name=EString ('manufacturer' '=' manufacturer=STRING)? ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'machine' name=EString ('manufacturer' '=' manufacturer=STRING)? ';'
		public Group getGroup() { return cGroup; }
		
		//'machine'
		public Keyword getMachineKeyword_0() { return cMachineKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('manufacturer' '=' manufacturer=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'manufacturer'
		public Keyword getManufacturerKeyword_2_0() { return cManufacturerKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//manufacturer=STRING
		public Assignment getManufacturerAssignment_2_2() { return cManufacturerAssignment_2_2; }
		
		//STRING
		public RuleCall getManufacturerSTRINGTerminalRuleCall_2_2_0() { return cManufacturerSTRINGTerminalRuleCall_2_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.Factory.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntegerObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.unican.ildm.practica3.Factory.EIntegerObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EIntegerObject returns ecore::EIntegerObject:
		//    '-'? INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final FactoryElements pFactory;
	private final ElementElements pElement;
	private final ShiftElements pShift;
	private final TaskElements pTask;
	private final OperatorElements pOperator;
	private final MachineElements pMachine;
	private final EStringElements pEString;
	private final EIntegerObjectElements pEIntegerObject;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FactoryGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFactory = new FactoryElements();
		this.pElement = new ElementElements();
		this.pShift = new ShiftElements();
		this.pTask = new TaskElements();
		this.pOperator = new OperatorElements();
		this.pMachine = new MachineElements();
		this.pEString = new EStringElements();
		this.pEIntegerObject = new EIntegerObjectElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.unican.ildm.practica3.Factory".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Factory:
	//    elements+=Element*
	//;
	public FactoryElements getFactoryAccess() {
		return pFactory;
	}
	
	public ParserRule getFactoryRule() {
		return getFactoryAccess().getRule();
	}
	
	//Element:
	//    Shift | Task | Operator | Machine
	//;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//Shift:
	//    'shift' name=EString
	//    '{'
	//        'date' ':' date=STRING  ';'
	//        'work' ':' work+=[Task] ("," work+=[Task])* ';'
	//    '}'
	//;
	public ShiftElements getShiftAccess() {
		return pShift;
	}
	
	public ParserRule getShiftRule() {
		return getShiftAccess().getRule();
	}
	
	//Task:
	//    {Task} 'task' name=EString ('duration' '=' duration=EIntegerObject)? '[' operator=[Operator] '->' machine=[Machine] ']' ';'
	//;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Operator:
	//    'operator' name=EString ('area' '=' area=STRING)? ';'
	//;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Machine:
	//    'machine' name=EString ('manufacturer' '=' manufacturer=STRING)? ';'
	//;
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EIntegerObject returns ecore::EIntegerObject:
	//    '-'? INT
	//;
	public EIntegerObjectElements getEIntegerObjectAccess() {
		return pEIntegerObject;
	}
	
	public ParserRule getEIntegerObjectRule() {
		return getEIntegerObjectAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
