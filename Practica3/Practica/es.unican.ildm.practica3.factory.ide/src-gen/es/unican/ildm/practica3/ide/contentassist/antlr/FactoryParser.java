/*
 * generated by Xtext 2.31.0
 */
package es.unican.ildm.practica3.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import es.unican.ildm.practica3.ide.contentassist.antlr.internal.InternalFactoryParser;
import es.unican.ildm.practica3.services.FactoryGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class FactoryParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FactoryGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FactoryGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getShiftAccess().getGroup(), "rule__Shift__Group__0");
			builder.put(grammarAccess.getShiftAccess().getGroup_10(), "rule__Shift__Group_10__0");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getTaskAccess().getGroup_3(), "rule__Task__Group_3__0");
			builder.put(grammarAccess.getOperatorAccess().getGroup(), "rule__Operator__Group__0");
			builder.put(grammarAccess.getOperatorAccess().getGroup_2(), "rule__Operator__Group_2__0");
			builder.put(grammarAccess.getMachineAccess().getGroup(), "rule__Machine__Group__0");
			builder.put(grammarAccess.getMachineAccess().getGroup_2(), "rule__Machine__Group_2__0");
			builder.put(grammarAccess.getEIntegerObjectAccess().getGroup(), "rule__EIntegerObject__Group__0");
			builder.put(grammarAccess.getFactoryAccess().getElementsAssignment(), "rule__Factory__ElementsAssignment");
			builder.put(grammarAccess.getShiftAccess().getNameAssignment_1(), "rule__Shift__NameAssignment_1");
			builder.put(grammarAccess.getShiftAccess().getDateAssignment_5(), "rule__Shift__DateAssignment_5");
			builder.put(grammarAccess.getShiftAccess().getWorkAssignment_9(), "rule__Shift__WorkAssignment_9");
			builder.put(grammarAccess.getShiftAccess().getWorkAssignment_10_1(), "rule__Shift__WorkAssignment_10_1");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_2(), "rule__Task__NameAssignment_2");
			builder.put(grammarAccess.getTaskAccess().getDurationAssignment_3_2(), "rule__Task__DurationAssignment_3_2");
			builder.put(grammarAccess.getTaskAccess().getOperatorAssignment_5(), "rule__Task__OperatorAssignment_5");
			builder.put(grammarAccess.getTaskAccess().getMachineAssignment_7(), "rule__Task__MachineAssignment_7");
			builder.put(grammarAccess.getOperatorAccess().getNameAssignment_1(), "rule__Operator__NameAssignment_1");
			builder.put(grammarAccess.getOperatorAccess().getAreaAssignment_2_2(), "rule__Operator__AreaAssignment_2_2");
			builder.put(grammarAccess.getMachineAccess().getNameAssignment_1(), "rule__Machine__NameAssignment_1");
			builder.put(grammarAccess.getMachineAccess().getManufacturerAssignment_2_2(), "rule__Machine__ManufacturerAssignment_2_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FactoryGrammarAccess grammarAccess;

	@Override
	protected InternalFactoryParser createParser() {
		InternalFactoryParser result = new InternalFactoryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FactoryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FactoryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
