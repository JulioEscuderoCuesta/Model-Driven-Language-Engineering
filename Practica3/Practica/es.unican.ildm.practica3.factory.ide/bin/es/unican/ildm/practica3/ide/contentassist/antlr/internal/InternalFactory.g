/*
 * generated by Xtext 2.31.0
 */
grammar InternalFactory;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package es.unican.ildm.practica3.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package es.unican.ildm.practica3.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import es.unican.ildm.practica3.services.FactoryGrammarAccess;

}
@parser::members {
	private FactoryGrammarAccess grammarAccess;

	public void setGrammarAccess(FactoryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFactory
entryRuleFactory
:
{ before(grammarAccess.getFactoryRule()); }
	 ruleFactory
{ after(grammarAccess.getFactoryRule()); } 
	 EOF 
;

// Rule Factory
ruleFactory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactoryAccess().getElementsAssignment()); }
		(rule__Factory__ElementsAssignment)*
		{ after(grammarAccess.getFactoryAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleElement
entryRuleElement
:
{ before(grammarAccess.getElementRule()); }
	 ruleElement
{ after(grammarAccess.getElementRule()); } 
	 EOF 
;

// Rule Element
ruleElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getElementAccess().getAlternatives()); }
		(rule__Element__Alternatives)
		{ after(grammarAccess.getElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShift
entryRuleShift
:
{ before(grammarAccess.getShiftRule()); }
	 ruleShift
{ after(grammarAccess.getShiftRule()); } 
	 EOF 
;

// Rule Shift
ruleShift 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShiftAccess().getGroup()); }
		(rule__Shift__Group__0)
		{ after(grammarAccess.getShiftAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTask
entryRuleTask
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTaskAccess().getGroup()); }
		(rule__Task__Group__0)
		{ after(grammarAccess.getTaskAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperator
entryRuleOperator
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperatorAccess().getGroup()); }
		(rule__Operator__Group__0)
		{ after(grammarAccess.getOperatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMachine
entryRuleMachine
:
{ before(grammarAccess.getMachineRule()); }
	 ruleMachine
{ after(grammarAccess.getMachineRule()); } 
	 EOF 
;

// Rule Machine
ruleMachine 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMachineAccess().getGroup()); }
		(rule__Machine__Group__0)
		{ after(grammarAccess.getMachineAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEIntegerObject
entryRuleEIntegerObject
:
{ before(grammarAccess.getEIntegerObjectRule()); }
	 ruleEIntegerObject
{ after(grammarAccess.getEIntegerObjectRule()); } 
	 EOF 
;

// Rule EIntegerObject
ruleEIntegerObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntegerObjectAccess().getGroup()); }
		(rule__EIntegerObject__Group__0)
		{ after(grammarAccess.getEIntegerObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Element__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getElementAccess().getShiftParserRuleCall_0()); }
		ruleShift
		{ after(grammarAccess.getElementAccess().getShiftParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getTaskParserRuleCall_1()); }
		ruleTask
		{ after(grammarAccess.getElementAccess().getTaskParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getOperatorParserRuleCall_2()); }
		ruleOperator
		{ after(grammarAccess.getElementAccess().getOperatorParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getElementAccess().getMachineParserRuleCall_3()); }
		ruleMachine
		{ after(grammarAccess.getElementAccess().getMachineParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__0__Impl
	rule__Shift__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getShiftKeyword_0()); }
	'shift'
	{ after(grammarAccess.getShiftAccess().getShiftKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__1__Impl
	rule__Shift__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getNameAssignment_1()); }
	(rule__Shift__NameAssignment_1)
	{ after(grammarAccess.getShiftAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__2__Impl
	rule__Shift__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getShiftAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__3__Impl
	rule__Shift__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getDateKeyword_3()); }
	'date'
	{ after(grammarAccess.getShiftAccess().getDateKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__4__Impl
	rule__Shift__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getColonKeyword_4()); }
	':'
	{ after(grammarAccess.getShiftAccess().getColonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__5__Impl
	rule__Shift__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getDateAssignment_5()); }
	(rule__Shift__DateAssignment_5)
	{ after(grammarAccess.getShiftAccess().getDateAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__6__Impl
	rule__Shift__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getSemicolonKeyword_6()); }
	';'
	{ after(grammarAccess.getShiftAccess().getSemicolonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__7__Impl
	rule__Shift__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getWorkKeyword_7()); }
	'work'
	{ after(grammarAccess.getShiftAccess().getWorkKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__8__Impl
	rule__Shift__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getColonKeyword_8()); }
	':'
	{ after(grammarAccess.getShiftAccess().getColonKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__9__Impl
	rule__Shift__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getWorkAssignment_9()); }
	(rule__Shift__WorkAssignment_9)
	{ after(grammarAccess.getShiftAccess().getWorkAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__10__Impl
	rule__Shift__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getGroup_10()); }
	(rule__Shift__Group_10__0)*
	{ after(grammarAccess.getShiftAccess().getGroup_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__11__Impl
	rule__Shift__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getSemicolonKeyword_11()); }
	';'
	{ after(grammarAccess.getShiftAccess().getSemicolonKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getRightCurlyBracketKeyword_12()); }
	'}'
	{ after(grammarAccess.getShiftAccess().getRightCurlyBracketKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Shift__Group_10__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group_10__0__Impl
	rule__Shift__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group_10__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getCommaKeyword_10_0()); }
	','
	{ after(grammarAccess.getShiftAccess().getCommaKeyword_10_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group_10__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Shift__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__Group_10__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShiftAccess().getWorkAssignment_10_1()); }
	(rule__Shift__WorkAssignment_10_1)
	{ after(grammarAccess.getShiftAccess().getWorkAssignment_10_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__0__Impl
	rule__Task__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTaskAction_0()); }
	()
	{ after(grammarAccess.getTaskAccess().getTaskAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__1__Impl
	rule__Task__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getTaskKeyword_1()); }
	'task'
	{ after(grammarAccess.getTaskAccess().getTaskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__2__Impl
	rule__Task__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getNameAssignment_2()); }
	(rule__Task__NameAssignment_2)
	{ after(grammarAccess.getTaskAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__3__Impl
	rule__Task__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getGroup_3()); }
	(rule__Task__Group_3__0)?
	{ after(grammarAccess.getTaskAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__4__Impl
	rule__Task__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getLeftSquareBracketKeyword_4()); }
	'['
	{ after(grammarAccess.getTaskAccess().getLeftSquareBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__5__Impl
	rule__Task__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getOperatorAssignment_5()); }
	(rule__Task__OperatorAssignment_5)
	{ after(grammarAccess.getTaskAccess().getOperatorAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__6__Impl
	rule__Task__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getHyphenMinusGreaterThanSignKeyword_6()); }
	'->'
	{ after(grammarAccess.getTaskAccess().getHyphenMinusGreaterThanSignKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__7__Impl
	rule__Task__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getMachineAssignment_7()); }
	(rule__Task__MachineAssignment_7)
	{ after(grammarAccess.getTaskAccess().getMachineAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__8__Impl
	rule__Task__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getRightSquareBracketKeyword_8()); }
	']'
	{ after(grammarAccess.getTaskAccess().getRightSquareBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getSemicolonKeyword_9()); }
	';'
	{ after(grammarAccess.getTaskAccess().getSemicolonKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3__0__Impl
	rule__Task__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getDurationKeyword_3_0()); }
	'duration'
	{ after(grammarAccess.getTaskAccess().getDurationKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3__1__Impl
	rule__Task__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getEqualsSignKeyword_3_1()); }
	'='
	{ after(grammarAccess.getTaskAccess().getEqualsSignKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Task__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTaskAccess().getDurationAssignment_3_2()); }
	(rule__Task__DurationAssignment_3_2)
	{ after(grammarAccess.getTaskAccess().getDurationAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group__0__Impl
	rule__Operator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getOperatorKeyword_0()); }
	'operator'
	{ after(grammarAccess.getOperatorAccess().getOperatorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group__1__Impl
	rule__Operator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getNameAssignment_1()); }
	(rule__Operator__NameAssignment_1)
	{ after(grammarAccess.getOperatorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group__2__Impl
	rule__Operator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getGroup_2()); }
	(rule__Operator__Group_2__0)?
	{ after(grammarAccess.getOperatorAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getOperatorAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operator__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group_2__0__Impl
	rule__Operator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getAreaKeyword_2_0()); }
	'area'
	{ after(grammarAccess.getOperatorAccess().getAreaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group_2__1__Impl
	rule__Operator__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getEqualsSignKeyword_2_1()); }
	'='
	{ after(grammarAccess.getOperatorAccess().getEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operator__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperatorAccess().getAreaAssignment_2_2()); }
	(rule__Operator__AreaAssignment_2_2)
	{ after(grammarAccess.getOperatorAccess().getAreaAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__0__Impl
	rule__Machine__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getMachineKeyword_0()); }
	'machine'
	{ after(grammarAccess.getMachineAccess().getMachineKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__1__Impl
	rule__Machine__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getNameAssignment_1()); }
	(rule__Machine__NameAssignment_1)
	{ after(grammarAccess.getMachineAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__2__Impl
	rule__Machine__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getGroup_2()); }
	(rule__Machine__Group_2__0)?
	{ after(grammarAccess.getMachineAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getMachineAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Machine__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group_2__0__Impl
	rule__Machine__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getManufacturerKeyword_2_0()); }
	'manufacturer'
	{ after(grammarAccess.getMachineAccess().getManufacturerKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group_2__1__Impl
	rule__Machine__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getEqualsSignKeyword_2_1()); }
	'='
	{ after(grammarAccess.getMachineAccess().getEqualsSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Machine__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMachineAccess().getManufacturerAssignment_2_2()); }
	(rule__Machine__ManufacturerAssignment_2_2)
	{ after(grammarAccess.getMachineAccess().getManufacturerAssignment_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EIntegerObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EIntegerObject__Group__0__Impl
	rule__EIntegerObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EIntegerObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntegerObjectAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntegerObjectAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EIntegerObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EIntegerObject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EIntegerObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntegerObjectAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntegerObjectAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factory__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactoryAccess().getElementsElementParserRuleCall_0()); }
		ruleElement
		{ after(grammarAccess.getFactoryAccess().getElementsElementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getShiftAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__DateAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftAccess().getDateSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getShiftAccess().getDateSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__WorkAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftAccess().getWorkTaskCrossReference_9_0()); }
		(
			{ before(grammarAccess.getShiftAccess().getWorkTaskIDTerminalRuleCall_9_0_1()); }
			RULE_ID
			{ after(grammarAccess.getShiftAccess().getWorkTaskIDTerminalRuleCall_9_0_1()); }
		)
		{ after(grammarAccess.getShiftAccess().getWorkTaskCrossReference_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Shift__WorkAssignment_10_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getShiftAccess().getWorkTaskCrossReference_10_1_0()); }
		(
			{ before(grammarAccess.getShiftAccess().getWorkTaskIDTerminalRuleCall_10_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getShiftAccess().getWorkTaskIDTerminalRuleCall_10_1_0_1()); }
		)
		{ after(grammarAccess.getShiftAccess().getWorkTaskCrossReference_10_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getTaskAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__DurationAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getDurationEIntegerObjectParserRuleCall_3_2_0()); }
		ruleEIntegerObject
		{ after(grammarAccess.getTaskAccess().getDurationEIntegerObjectParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__OperatorAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getOperatorOperatorCrossReference_5_0()); }
		(
			{ before(grammarAccess.getTaskAccess().getOperatorOperatorIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTaskAccess().getOperatorOperatorIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getTaskAccess().getOperatorOperatorCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__MachineAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTaskAccess().getMachineMachineCrossReference_7_0()); }
		(
			{ before(grammarAccess.getTaskAccess().getMachineMachineIDTerminalRuleCall_7_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTaskAccess().getMachineMachineIDTerminalRuleCall_7_0_1()); }
		)
		{ after(grammarAccess.getTaskAccess().getMachineMachineCrossReference_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getOperatorAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__AreaAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getAreaSTRINGTerminalRuleCall_2_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getOperatorAccess().getAreaSTRINGTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getMachineAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Machine__ManufacturerAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMachineAccess().getManufacturerSTRINGTerminalRuleCall_2_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getMachineAccess().getManufacturerSTRINGTerminalRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
