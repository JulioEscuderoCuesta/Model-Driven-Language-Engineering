/**
 */
package candy_factory_v2.provider;

import candy_factory_v2.util.Candy_factory_v2AdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Candy_factory_v2ItemProviderAdapterFactory extends Candy_factory_v2AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Candy_factory_v2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.Factory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactoryItemProvider factoryItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.Factory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactoryAdapter() {
		if (factoryItemProvider == null) {
			factoryItemProvider = new FactoryItemProvider(this);
		}

		return factoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.ConveyorBelt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConveyorBeltItemProvider conveyorBeltItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.ConveyorBelt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConveyorBeltAdapter() {
		if (conveyorBeltItemProvider == null) {
			conveyorBeltItemProvider = new ConveyorBeltItemProvider(this);
		}

		return conveyorBeltItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.Assembler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssemblerItemProvider assemblerItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.Assembler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssemblerAdapter() {
		if (assemblerItemProvider == null) {
			assemblerItemProvider = new AssemblerItemProvider(this);
		}

		return assemblerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.Wrapper} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WrapperItemProvider wrapperItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.Wrapper}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWrapperAdapter() {
		if (wrapperItemProvider == null) {
			wrapperItemProvider = new WrapperItemProvider(this);
		}

		return wrapperItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.Flattener} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlattenerItemProvider flattenerItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.Flattener}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlattenerAdapter() {
		if (flattenerItemProvider == null) {
			flattenerItemProvider = new FlattenerItemProvider(this);
		}

		return flattenerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.CandyProducer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CandyProducerItemProvider candyProducerItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.CandyProducer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCandyProducerAdapter() {
		if (candyProducerItemProvider == null) {
			candyProducerItemProvider = new CandyProducerItemProvider(this);
		}

		return candyProducerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.StickProducer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StickProducerItemProvider stickProducerItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.StickProducer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStickProducerAdapter() {
		if (stickProducerItemProvider == null) {
			stickProducerItemProvider = new StickProducerItemProvider(this);
		}

		return stickProducerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.Stick} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StickItemProvider stickItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.Stick}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStickAdapter() {
		if (stickItemProvider == null) {
			stickItemProvider = new StickItemProvider(this);
		}

		return stickItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.CandyFlat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CandyFlatItemProvider candyFlatItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.CandyFlat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCandyFlatAdapter() {
		if (candyFlatItemProvider == null) {
			candyFlatItemProvider = new CandyFlatItemProvider(this);
		}

		return candyFlatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.CandyBall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CandyBallItemProvider candyBallItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.CandyBall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCandyBallAdapter() {
		if (candyBallItemProvider == null) {
			candyBallItemProvider = new CandyBallItemProvider(this);
		}

		return candyBallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link candy_factory_v2.Lollipop} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LollipopItemProvider lollipopItemProvider;

	/**
	 * This creates an adapter for a {@link candy_factory_v2.Lollipop}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLollipopAdapter() {
		if (lollipopItemProvider == null) {
			lollipopItemProvider = new LollipopItemProvider(this);
		}

		return lollipopItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (factoryItemProvider != null) factoryItemProvider.dispose();
		if (conveyorBeltItemProvider != null) conveyorBeltItemProvider.dispose();
		if (assemblerItemProvider != null) assemblerItemProvider.dispose();
		if (wrapperItemProvider != null) wrapperItemProvider.dispose();
		if (flattenerItemProvider != null) flattenerItemProvider.dispose();
		if (candyProducerItemProvider != null) candyProducerItemProvider.dispose();
		if (stickProducerItemProvider != null) stickProducerItemProvider.dispose();
		if (stickItemProvider != null) stickItemProvider.dispose();
		if (candyFlatItemProvider != null) candyFlatItemProvider.dispose();
		if (candyBallItemProvider != null) candyBallItemProvider.dispose();
		if (lollipopItemProvider != null) lollipopItemProvider.dispose();
	}

}
